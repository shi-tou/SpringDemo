<?xml version="1.0"?>
<configuration>
	<configSections>
		<!--spring 模块-->
		<sectionGroup name="spring">
			<section name="context" type="Spring.Context.Support.WebContextHandler, Spring.Web"/>
			<section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
			<section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core" />
		</sectionGroup>
	</configSections>
	<appSettings>
		<!-- 数据库地址 -->
		<add key="db.datasource" value="127.0.0.1"/>
		<!-- 数据库名称 -->
		<add key="db.database" value="SpringDemo"/>
		<!-- 数据库用户名 -->
		<add key="db.user" value="sa"/>
		<!-- 数据库密码，如果是加密的密码，将"EncyptedPassword"参数设为true,否则设为false -->
		<add key="db.pwd" value="123"/>
		<!-- 数据库密码是否加密 -->
		<add key="EncyptedPassword" value="false"/>
		<!-- 收件人的邮箱 -->
		<add key="ReMailbox" value="gx_ylb@126.com"/>
		<!-- 邮件服务器 -->
		<add key="Smtp" value="smtp.126.com"/>
		<!-- 邮箱发件人 -->
		<add key="SendMailbox" value="470868331@qq.com"/>
		<!-- 邮箱用户 -->
		<add key="UserName" value=""/>
		<!-- 邮箱密码 -->
		<add key="Password" value=""/>
	</appSettings>
	<connectionStrings/>
	<!--spring 配置-->
	<spring>
		<context>
			<!--引入外部配置文件-->
			<resource uri="~/Config/page.xml"/>
			<resource uri="~/Config/service.xml"/>
			<!--引向当前配置文件的spring/objects节点-->
			<resource uri="config://spring/objects"/>
		</context>
		<objects xmlns="http://www.springframework.net" xmlns:r="http://www.springframework.net/remoting" xmlns:db="http://www.springframework.net/database" xmlns:tx="http://www.springframework.net/tx">
			<description>定义对象的出口</description>
			<!--定义数据库。这里的配置引用了appSettings节点的键值(数据库地址、数据名、用户名、密码)，使用于修改！当然也可以直接写:
			注意：objects节点需要引用命名空间xmlns:db="Ｈttp://www.springframework.net/database"。）-->
			<db:provider id="targetDbProvider" provider="System.Data.SqlClient" connectionString="Data Source=${db.datasource};Database=${db.database};User ID=${db.user};Password=${db.pwd};Trusted_Connection=False"/>
			<!--Provider对象-->
			<object id="dbProvider" type="Spring.Data.Common.UserCredentialsDbProvider, Spring.Data">
				<property name="TargetDbProvider" ref="targetDbProvider" />
			</object>
			<!--AdoTemplate对象-->
			<object id="adoTemplate" type="Spring.Data.Core.AdoTemplate, Spring.Data">
				<property name="DbProvider" ref="dbProvider"/>
			</object>
			<!--事务管理器-->
			<object id="transactionManager" type="Spring.Data.Core.AdoPlatformTransactionManager, Spring.Data">
				<property name="DbProvider" ref="dbProvider" />
			</object>
			<object name="appConfigPropertyHolder" type="Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer, Spring.Core">
				<property name="configSections">
					<value>appSettings</value>
				</property>
			</object>
			<tx:attribute-driven transaction-manager="transactionManager" />			
		</objects>
		<parsers>
			<parser type="Spring.Data.Config.DatabaseNamespaceParser, Spring.Data" />
			<parser type="Spring.Transaction.Config.TxNamespaceParser, Spring.Data" />
		</parsers>

	</spring>
	<system.web>
		<!-- 
            设置 compilation debug="true" 可将调试符号插入
            已编译的页面中。但由于这会 
            影响性能，因此只在开发过程中将此值 
            设置为 true。
        -->
		<compilation debug="true" targetFramework="4.0">
		</compilation>
		<!--
            通过 <authentication> 节可以配置 ASP.NET 用来
            识别进入用户的
            安全身份验证模式。 
        -->
		<authentication mode="Windows"/>
		<!--
            如果在执行请求的过程中出现未处理的错误，
            则通过 <customErrors> 节可以配置相应的处理步骤。具体说来，
            开发人员通过该节可以配置
            要显示的 html 错误页
            以代替错误堆栈跟踪。

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
		<httpHandlers>
			<!--页面注入需要添加httpHandler-->
			<add verb="*" path="*.aspx" type="Spring.Web.Support.PageHandlerFactory, Spring.Web"/>
		</httpHandlers>
		<httpModules>
			<!--页面注入需要添加httpModule-->
			<add name="Spring" type="Spring.Context.Support.WebSupportModule, Spring.Web"/>
		</httpModules>
		<pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/></system.web>
	<!-- 
        在 Internet 信息服务 7.0 下运行 ASP.NET AJAX 需要 system.webServer
        节。对早期版本的 IIS 来说则不需要此节。
    -->
	<system.webServer>
		<validation validateIntegratedModeConfiguration="false"/>
	</system.webServer>
</configuration>
